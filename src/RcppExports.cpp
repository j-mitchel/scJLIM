// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// indicesGreaterThan
IntegerVector indicesGreaterThan(NumericVector x, double threshold);
RcppExport SEXP _scJLIM_indicesGreaterThan(SEXP xSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(indicesGreaterThan(x, threshold));
    return rcpp_result_gen;
END_RCPP
}
// indicesIsTrue
IntegerVector indicesIsTrue(LogicalVector x);
RcppExport SEXP _scJLIM_indicesIsTrue(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(indicesIsTrue(x));
    return rcpp_result_gen;
END_RCPP
}
// perm_test
NumericVector perm_test(DataFrame assoc1, NumericMatrix permmat, NumericMatrix ld0, NumericMatrix ld2, double R2thr, double lambda_t);
RcppExport SEXP _scJLIM_perm_test(SEXP assoc1SEXP, SEXP permmatSEXP, SEXP ld0SEXP, SEXP ld2SEXP, SEXP R2thrSEXP, SEXP lambda_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type assoc1(assoc1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type permmat(permmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ld0(ld0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ld2(ld2SEXP);
    Rcpp::traits::input_parameter< double >::type R2thr(R2thrSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_t(lambda_tSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_test(assoc1, permmat, ld0, ld2, R2thr, lambda_t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scJLIM_indicesGreaterThan", (DL_FUNC) &_scJLIM_indicesGreaterThan, 2},
    {"_scJLIM_indicesIsTrue", (DL_FUNC) &_scJLIM_indicesIsTrue, 1},
    {"_scJLIM_perm_test", (DL_FUNC) &_scJLIM_perm_test, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_scJLIM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
